1. 사슬팔 구현 (Distance Joint 2D사용.)

발생한 문제점1 : 어째서인지 진자운동이 제대로 동작되지 않았다

해결 방법 : FixedUpdate에서 움직임을 제어하기 위해 RigidBody의 velocity를 건드리고 있었어서 boolean과 조건문을 추가 해주었다.


발생한 문제점2 : 팔이 길때 Distance Joint가 플레이어의 움직임을 방해했다.

해결 방법 : 땅에 있을때는 Distance Joint의 enable을 false로 해주었다.



2. 2D에서 target을 바라보는 오브젝트 구현

발생한 문제점1 : transform.rotation.z(또는 x, y)가 가리키는 값은 Quaternion값으로 인스펙터의 Transform의 Rotation이 가리키는 값이 아니다.

해결 방법 : transform.rotation.eulerAngles.z에 접근하면 된다.


발생한 문제점2 : 기본적으로 현재 rotation.eulerAngle.z가 preferRotation 보다 크면 반시계로 움직여야 하지만 한바퀴 돌아버렸을때(head 기준으로 Vector2.up방향을 지날 때) preferRotation 값이 1->360 혹은 그 반대로 값이 급변한다. 이 때 head가 가까운방향으로 도는게 아니라 먼방향으로 한바퀴를 길게 도는 문제가 생겼다.

해결 방법 : rotation.eulerAngle.z과 preferRotation의 차이가 180보다 크면 회전을 반대로 하게 조건문을 추가 해주었다.



3. Reversal Dash 대각선 방향 인풋 받기

발생한 문제점 : 리버설 대쉬를 구현할 때 인풋 밸류를 위/아래 키와 오른쪽/왼쪽 키를 같이 입력받아서 대각선 이동을 구현 하려 할 때에 플레이어가 버튼을 동시에 눌러도 먼저 눌린키 하나만 입력되는 문제가 있었다.

해결 방법 : 불리언과 벡터변수를 두개로 분리해서 좌우 입력과 위아래 입력을 따로받고 받을 수 있는 시간을 주었다. (격투게임처럼)



4. 넉백 구현
발생한 문제점 : Trigger인 DamageComponent와 피격체의 콘택트 포인트를 알고 싶었다.

해결 방법 : collision.ClosestPoint()를 사용하였다.



5. 움직이는 발판 구현

발생한 문제점1 : 움직이는 발판 위에 있는 오브젝트가 발판이랑 같이 움직이게 하고 싶었다.

해결 방법 : 발판위에있는 오브젝트를 콘택트로 체크해서 발판의 벨로시티를 더해주었다.


발생한 문제점 2 : 그런데 이 때, 캐릭터에 인풋이 없을 경우 벨로시티.x가 0이 되게 해놓았어서(미끄러지지 않게) 잘 동작하지 않았다.

해결 방법 : velocityCorrection이라는 변수를 하나 만들어 주어서 캐릭터 움직임 계산이 끝나고 벨로시티를 더해주게 만들었다.


발생한 문제점 3 : 발판이 위로(또는 위대각선)이동 할 때 캐릭터가 통통 튀었다.

해결 방법 : velocityCorrection *= Vector2.right를 해주었다.



6. chain arm predict line renderer 구현

발생한 문제점 1 : Layer를 비교 할 때 gameobject.layer는 layer number를 반환하고 LayerMask.GetMask()는 2^(layer number)를 반환했다.

해결 방법 : left shift(1 << layer number)를 쓰면 2^(layer number)가 된다. 그러면 비교 할 수 있다.


발생한 문제점 2 : LineRenderer의 color를 바꾸고 싶었는데 lineRenderer.colorGradient를 직접 건드렸을 때 제대로 동작하지 않았다.

해결 방법 : colorGradient를 직접 건드리는게 아니라 LineRenderer.startColor와 LineRenderer.endColor를 설정 해주면 되었다.


발생한 문제점 3 : 점선으로 그린 라인렌더러의 텍스쳐가 반복되지 않고 늘어났다.

해결 방법 : 1. 사용된 매테리얼의 스프라이트의 Wrap Mode를 Repeat으로 바꾸어 주었다. 2. LineRenderer의 Texture Mode를 Tile로 바꾸어 주었다.



7. 밟으면 내려가는 발판 구현

발생한 문제점 : 밟았을때 내려가게 만들었더니 내려가면서 콜라이더가 떨어지는 판정이 되어서 통통 튀면서 내려갔다 올라갔다를 반복했다.

해결 방법 : 이전에 움직이는 발판의 경우에는 correctionValue에 Vector2.right를 곱했었는데 내려가는 발판의 경우에는 correctionValue를 그대로 주고 대신에 점프 키를 눌렀을 때에 correctionValue를 Vector2.right를 곱하게 해서 아래로 잡아당기는 것이 점프를 방해하지 못하게 만들었다.. 



8. 집행명령(필드) 구현

발생한 문제점 : 집행명령이 스폰되는 위치를 정하기 위해 circleCast를 이용하였다. 그런데 circleCast이다 보니 네모난 땅의 모서리를 캐스트 하게 되는 경우 normal값이 이상하게 나와서 집행명령의 스폰 포인트도 이상하게 나왔다.

해결 방법 : Vector2 discriminantVector 변수를 선언해주고 모서리를 캐스팅하여 값이 튀었을 때의 값을 결정 해주어서 해결하였다.(ExecutorZone 스크립트 참조)



9. HitBox 문제

발생한 문제점 : 가끔 히트박스가 생성되었을 때에 충돌이 체크되지 않는 경우가 발생하였다.

해결 방법 : 콜라이더의 Geometry Type을 Outlines에서 Plygons로 바꾸어 주었다.
------------------이전 기획 단계------------------
0. 공격으로 총알을 제거 하는데 히트박스가 먼저 생성되고 투사체가 들어 오는 경우는 막아졌지만
이미 투사체가 들어온 후 그 위에 히트박스가 그려질경우에는 콜리젼 체크가 되지 않았었다.

해결 방법:
히트박스의 콜라이더의 Geometry Type이 Outlines인 경우에는 외곽선이 충돌할 때에 콜리젼이 체크가 된다.
Geometry Type을 Polygons로 고쳐서 해결하였다.
